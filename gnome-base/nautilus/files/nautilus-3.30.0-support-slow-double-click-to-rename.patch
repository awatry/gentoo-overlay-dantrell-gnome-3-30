diff '--exclude=.git' -urN a/data/org.gnome.nautilus.gschema.xml b/data/org.gnome.nautilus.gschema.xml
--- a/data/org.gnome.nautilus.gschema.xml	2018-09-03 12:31:52.000000000 -0500
+++ b/data/org.gnome.nautilus.gschema.xml	2018-09-25 14:15:35.869533380 -0500
@@ -121,6 +121,11 @@
       <summary>Type of click used to launch/open files</summary>
       <description>Possible values are “single” to launch files on a single click, or “double” to launch them on a double click.</description>
     </key>
+    <key name="slow-double-click-policy" type="b">
+      <default>false</default>
+      <summary>Type of click used to rename files</summary>
+      <description>If set to true, then Nautilus will have a feature allowing you to rename files on a slow double click.</description>
+    </key>
     <key name="executable-text-activation" enum="org.gnome.nautilus.ActivationChoice">
       <default>'display'</default>
       <summary>What to do with executable text files when activated</summary>
diff '--exclude=.git' -urN a/src/nautilus-canvas-container.c b/src/nautilus-canvas-container.c
--- a/src/nautilus-canvas-container.c	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-canvas-container.c	2018-09-25 13:28:04.240649000 -0500
@@ -165,6 +165,11 @@
 
 static void schedule_redo_layout (NautilusCanvasContainer *container);
 
+static gboolean
+handle_canvas_slow_double_click (NautilusCanvasContainer *container,
+							  NautilusCanvasIcon *icon,
+							  GdkEventButton *event);
+
 static const char *nautilus_canvas_container_accessible_action_names[] =
 {
     "activate",
@@ -3235,8 +3240,13 @@
     /* Invoke the canvas event handler and see if an item picks up the event. */
     clicked_on_icon = GTK_WIDGET_CLASS (nautilus_canvas_container_parent_class)->button_press_event (widget, event);
 
-    if (!gtk_widget_has_focus (widget))
-    {
+    NautilusFilesViewPrivate *priv;
+    priv = G_TYPE_INSTANCE_GET_PRIVATE (NAUTILUS_FILES_VIEW (get_canvas_view (container)),
+                                        NAUTILUS_TYPE_FILES_VIEW,
+                                        NautilusFilesViewPrivate);
+
+    if (!gtk_widget_has_focus (widget) &&
+        !gtk_widget_has_focus (priv->rename_file_controller)) {
         gtk_widget_grab_focus (widget);
     }
 
@@ -3395,6 +3405,20 @@
             }
         }
     }
+
+	if (details->drag_icon != NULL &&
+		handle_canvas_slow_double_click (container, details->drag_icon, event)) {
+		if (!details->skip_rename_on_release &&
+			(details->just_renamed == NULL || details->just_renamed != details->drag_icon))
+			nautilus_files_view_rename_file_popover_new (NAUTILUS_FILES_VIEW (get_canvas_view (container)),
+														 NAUTILUS_FILE (details->drag_icon->data));
+		/* Allow normal double click if just renamed */
+		if (details->just_renamed == details->drag_icon) {
+			details->just_renamed = NULL;
+		} else {
+			details->just_renamed = details->drag_icon;
+		}
+	}
 }
 
 static gboolean
@@ -3434,6 +3458,44 @@
     }
 }
 
+static gboolean
+clicked_within_slow_double_click_interval (NautilusCanvasContainer *container, NautilusCanvasIcon *icon, GdkEventButton *event)
+{
+	NautilusCanvasContainerDetails *details;
+	static gint64 last_click_time = 0;
+	static gint click_count = 0;
+	gint double_click_time;
+	gint64 current_time;
+
+	details = container->details;
+
+	/* Determine click count (slow double click time is the 400ms default + 2s) */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (container))), 
+				  "gtk-double-click-time", &double_click_time,
+				  NULL);
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_click_time < (double_click_time + 2000) * 1000) {
+		click_count = 1;
+	} else {
+		/* Allow normal double click if just renamed */
+		if (details->just_renamed == details->drag_icon) {
+			details->just_renamed = NULL;
+		}
+		click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_click_time = current_time;
+
+	/* Only allow slow double click */
+	if (click_count == 1 && icon == get_first_selected_icon (container)) {
+		click_count = 0;
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
 static void
 clear_drag_state (NautilusCanvasContainer *container)
 {
@@ -4169,6 +4231,9 @@
 
     container->details = details;
 
+	details->skip_rename_on_release = FALSE;
+	details->just_renamed = NULL;
+
     g_signal_connect (container, "notify::has-focus",
                       G_CALLBACK (handle_has_focus_changed), NULL);
     g_signal_connect (container, "notify::scale-factor",
@@ -4218,6 +4283,46 @@
     return FALSE;
 }
 
+static gboolean
+handle_canvas_slow_double_click (NautilusCanvasContainer *container,
+							  NautilusCanvasIcon *icon,
+							  GdkEventButton *event)
+{
+	NautilusCanvasContainerDetails *details;
+
+	NautilusFile *file = NAUTILUS_FILE (icon->data);
+
+	if (!nautilus_file_can_rename (file))
+		return FALSE;
+
+	if (event->button != DRAG_BUTTON) {
+		return FALSE;
+	}
+
+	details = container->details;
+
+	if (!details->slow_double_click_mode)
+		return FALSE;
+
+	GList *selection = nautilus_canvas_container_get_selection (container);
+	gint selected_count = g_list_length (selection);
+	g_list_free (selection);
+
+	if (selected_count != 1)
+		return FALSE;
+
+	if (!details->single_click_mode &&
+		clicked_within_slow_double_click_interval (container, icon, event) &&
+		details->double_click_icon[0] == details->double_click_icon[1] &&
+		details->double_click_button[0] == details->double_click_button[1]) {
+		if (!button_event_modifies_selection (event)) {
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
 /* NautilusCanvasIcon event handling.  */
 
 /* Conceptually, pressing button 1 together with CTRL or SHIFT toggles
@@ -4238,6 +4343,8 @@
 
     details = container->details;
 
+	details->skip_rename_on_release = FALSE;
+
     if (event->type == GDK_2BUTTON_PRESS || event->type == GDK_3BUTTON_PRESS)
     {
         return TRUE;
@@ -4285,6 +4392,10 @@
      */
     details->icon_selected_on_button_down = icon->is_selected;
 
+	GList *icons = nautilus_canvas_container_get_selected_icons (container);
+	details->skip_rename_on_release = g_list_length (icons) > 1;
+	g_list_free (icons);
+
     if ((event->button == DRAG_BUTTON || event->button == MIDDLE_BUTTON) &&
         (event->state & GDK_SHIFT_MASK) != 0)
     {
@@ -5675,6 +5786,15 @@
     container->details->single_click_mode = single_click_mode;
 }
 
+void
+nautilus_canvas_container_set_slow_double_click_mode (NautilusCanvasContainer *container,
+													  gboolean slow_double_click_mode)
+{
+	g_return_if_fail (NAUTILUS_IS_CANVAS_CONTAINER (container));
+
+	container->details->slow_double_click_mode = slow_double_click_mode;
+}
+
 /* handle theme changes */
 
 void
diff '--exclude=.git' -urN a/src/nautilus-canvas-container.h b/src/nautilus-canvas-container.h
--- a/src/nautilus-canvas-container.h	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-canvas-container.h	2018-09-25 14:15:35.870533375 -0500
@@ -269,6 +269,8 @@
 									   int                     new_zoom_level);
 void              nautilus_canvas_container_set_single_click_mode         (NautilusCanvasContainer  *container,
 									   gboolean                single_click_mode);
+void              nautilus_canvas_container_set_slow_double_click_mode   (NautilusCanvasContainer  *container,
+									   gboolean                slow_double_click_mode);
 void              nautilus_canvas_container_enable_linger_selection       (NautilusCanvasContainer  *view,
 									   gboolean                enable);
 void              nautilus_canvas_container_set_font                      (NautilusCanvasContainer  *container,
diff '--exclude=.git' -urN a/src/nautilus-canvas-private.h b/src/nautilus-canvas-private.h
--- a/src/nautilus-canvas-private.h	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-canvas-private.h	2018-09-25 14:15:35.870533375 -0500
@@ -26,6 +26,8 @@
 #include "nautilus-canvas-item.h"
 #include "nautilus-canvas-container.h"
 #include "nautilus-canvas-dnd.h"
+#include "nautilus-canvas-view-container.h"
+#include "nautilus-files-view.h"
 
 /* An Icon. */
 
@@ -160,6 +162,9 @@
 	NautilusCanvasIcon *double_click_icon[2]; /* Both clicks in a double click need to be on the same icon */
 	guint double_click_button[2];
 
+	gboolean skip_rename_on_release;
+	NautilusCanvasIcon *just_renamed;
+
 	NautilusCanvasIcon *range_selection_base_icon;
 	
 	/* Idle ID. */
@@ -186,6 +191,7 @@
 
 	/* Mode settings. */
 	gboolean single_click_mode;
+	gboolean slow_double_click_mode;
 
         /* Set to TRUE after first allocation has been done */
 	gboolean has_been_allocated;
diff '--exclude=.git' -urN a/src/nautilus-canvas-view-container.c b/src/nautilus-canvas-view-container.c
--- a/src/nautilus-canvas-view-container.c	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-canvas-view-container.c	2018-09-25 14:15:35.871532000 -0500
@@ -42,7 +42,7 @@
 
 static GQuark attribute_none_q;
 
-static NautilusCanvasView *
+NautilusCanvasView *
 get_canvas_view (NautilusCanvasContainer *container)
 {
     /* Type unsafe comparison for performance */
diff '--exclude=.git' -urN a/src/nautilus-canvas-view-container.h b/src/nautilus-canvas-view-container.h
--- a/src/nautilus-canvas-view-container.h	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-canvas-view-container.h	2018-09-25 14:17:02.946175861 -0500
@@ -30,6 +30,7 @@
                       NAUTILUS, CANVAS_VIEW_CONTAINER,
                       NautilusCanvasContainer)
 
+NautilusCanvasView *get_canvas_view (NautilusCanvasContainer *container);
 NautilusCanvasContainer *nautilus_canvas_view_container_construct (NautilusCanvasViewContainer *canvas_container,
                                                                    NautilusCanvasView      *view);
 NautilusCanvasContainer *nautilus_canvas_view_container_new       (NautilusCanvasView      *view);
diff '--exclude=.git' -urN a/src/nautilus-canvas-view.c b/src/nautilus-canvas-view.c
--- a/src/nautilus-canvas-view.c	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-canvas-view.c	2018-09-25 14:15:35.871533371 -0500
@@ -177,6 +177,7 @@
                                                                         NautilusFile        *file,
                                                                         const SortCriterion *sort);
 static void                 nautilus_canvas_view_update_click_mode (NautilusCanvasView *canvas_view);
+static void                 nautilus_canvas_view_update_slow_double_click_mode (NautilusCanvasView *canvas_view);
 static void                 nautilus_canvas_view_reveal_selection (NautilusFilesView *view);
 static const SortCriterion *get_sort_criterion_by_metadata_text (const char *metadata_text,
                                                                  gboolean    reversed);
@@ -1240,6 +1241,14 @@
 }
 
 static void
+nautilus_canvas_view_slow_double_click_policy_changed (NautilusView *directory_view)
+{
+	g_assert (NAUTILUS_IS_CANVAS_VIEW (directory_view));
+
+	nautilus_canvas_view_update_slow_double_click_mode (NAUTILUS_CANVAS_VIEW (directory_view));
+}
+
+static void
 image_display_policy_changed_callback (gpointer callback_data)
 {
     NautilusCanvasView *canvas_view;
@@ -1291,6 +1300,21 @@
     nautilus_canvas_container_sort (get_canvas_container (canvas_view));
 }
 
+static void
+nautilus_canvas_view_update_slow_double_click_mode (NautilusCanvasView *canvas_view)
+{
+	NautilusCanvasContainer   *canvas_container;
+	gboolean slow_double_click_mode;
+
+	canvas_container = get_canvas_container (canvas_view);
+	g_assert (canvas_container != NULL);
+
+	slow_double_click_mode = g_settings_get_boolean (nautilus_preferences, NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY);
+
+	nautilus_canvas_container_set_slow_double_click_mode (canvas_container,
+														  slow_double_click_mode);
+}
+
 static gboolean
 canvas_view_can_accept_item (NautilusCanvasContainer *container,
                              NautilusFile            *target_item,
@@ -1417,6 +1441,7 @@
                        GTK_WIDGET (canvas_container));
 
     nautilus_canvas_view_update_click_mode (canvas_view);
+    nautilus_canvas_view_update_slow_double_click_mode (canvas_view);
     nautilus_canvas_container_set_zoom_level (canvas_container,
                                               get_default_zoom_level (canvas_view));
 
@@ -1572,6 +1597,7 @@
     nautilus_files_view_class->invert_selection = nautilus_canvas_view_invert_selection;
     nautilus_files_view_class->compare_files = compare_files;
     nautilus_files_view_class->click_policy_changed = nautilus_canvas_view_click_policy_changed;
+    nautilus_files_view_class->slow_double_click_policy_changed = nautilus_canvas_view_slow_double_click_policy_changed;
     nautilus_files_view_class->update_actions_state = nautilus_canvas_view_update_actions_state;
     nautilus_files_view_class->sort_directories_first_changed = nautilus_canvas_view_sort_directories_first_changed;
     nautilus_files_view_class->widget_to_file_operation_position = nautilus_canvas_view_widget_to_file_operation_position;
diff '--exclude=.git' -urN a/src/nautilus-files-view.c b/src/nautilus-files-view.c
--- a/src/nautilus-files-view.c	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-files-view.c	2018-09-25 13:31:57.179186000 -0500
@@ -53,13 +53,11 @@
 #include "nautilus-batch-rename-utilities.h"
 #include "nautilus-canvas-view.h"
 #include "nautilus-clipboard.h"
-#include "nautilus-compress-dialog-controller.h"
 #include "nautilus-directory.h"
 #include "nautilus-dnd.h"
 #include "nautilus-enums.h"
 #include "nautilus-error-reporting.h"
 #include "nautilus-file-changes-queue.h"
-#include "nautilus-file-name-widget-controller.h"
 #include "nautilus-file-operations.h"
 #include "nautilus-file-private.h"
 #include "nautilus-file-undo-manager.h"
@@ -73,19 +71,15 @@
 #include "nautilus-metadata.h"
 #include "nautilus-mime-actions.h"
 #include "nautilus-module.h"
-#include "nautilus-new-folder-dialog-controller.h"
 #include "nautilus-previewer.h"
 #include "nautilus-profile.h"
 #include "nautilus-program-choosing.h"
 #include "nautilus-properties-window.h"
-#include "nautilus-rename-file-popover-controller.h"
 #include "nautilus-search-directory.h"
 #include "nautilus-signaller.h"
-#include "nautilus-tag-manager.h"
 #include "nautilus-toolbar.h"
 #include "nautilus-trash-monitor.h"
 #include "nautilus-ui-utilities.h"
-#include "nautilus-view.h"
 #include "nautilus-view-icon-controller.h"
 #include "nautilus-window.h"
 
@@ -158,128 +152,6 @@
 
 typedef struct
 {
-    /* Main components */
-    GtkWidget *overlay;
-
-    NautilusWindowSlot *slot;
-    NautilusDirectory *model;
-    NautilusFile *directory_as_file;
-    GFile *location;
-    guint dir_merge_id;
-
-    NautilusQuery *search_query;
-
-    NautilusRenameFilePopoverController *rename_file_controller;
-    NautilusNewFolderDialogController *new_folder_controller;
-    NautilusCompressDialogController *compress_controller;
-
-    gboolean supports_zooming;
-
-    GList *scripts_directory_list;
-    GList *templates_directory_list;
-
-    guint display_selection_idle_id;
-    guint update_context_menus_timeout_id;
-    guint update_status_idle_id;
-    guint reveal_selection_idle_id;
-
-    guint display_pending_source_id;
-    guint changes_timeout_id;
-
-    guint update_interval;
-    guint64 last_queued;
-
-    guint files_added_handler_id;
-    guint files_changed_handler_id;
-    guint load_error_handler_id;
-    guint done_loading_handler_id;
-    guint file_changed_handler_id;
-
-    GList *new_added_files;
-    GList *new_changed_files;
-
-    GHashTable *non_ready_files;
-
-    GList *old_added_files;
-    GList *old_changed_files;
-
-    GList *pending_selection;
-    GHashTable *pending_reveal;
-
-    /* whether we are in the active slot */
-    gboolean active;
-
-    /* loading indicates whether this view has begun loading a directory.
-     * This flag should need not be set inside subclasses. NautilusFilesView automatically
-     * sets 'loading' to TRUE before it begins loading a directory's contents and to FALSE
-     * after it finishes loading the directory and its view.
-     */
-    gboolean loading;
-    gboolean templates_present;
-    gboolean scripts_present;
-
-    gboolean in_destruction;
-
-    gboolean sort_directories_first;
-
-    gboolean show_hidden_files;
-    gboolean ignore_hidden_file_preferences;
-
-    gboolean batching_selection_level;
-    gboolean selection_changed_while_batched;
-
-    gboolean selection_was_removed;
-
-    gboolean metadata_for_directory_as_file_pending;
-    gboolean metadata_for_files_in_directory_pending;
-
-    GList *subdirectory_list;
-
-    GMenu *selection_menu;
-    GMenu *background_menu;
-
-    GActionGroup *view_action_group;
-
-    GtkWidget *scrolled_window;
-
-    /* Empty states */
-    GtkWidget *folder_is_empty_widget;
-    GtkWidget *trash_is_empty_widget;
-    GtkWidget *no_search_results_widget;
-    GtkWidget *starred_is_empty_widget;
-
-    /* Floating bar */
-    guint floating_bar_set_status_timeout_id;
-    guint floating_bar_loading_timeout_id;
-    guint floating_bar_set_passthrough_timeout_id;
-    GtkWidget *floating_bar;
-
-    /* Toolbar menu */
-    NautilusToolbarMenuSections *toolbar_menu_sections;
-    GtkWidget *sort_menu;
-    GtkWidget *sort_trash_time;
-    GtkWidget *visible_columns;
-    GtkWidget *stop;
-    GtkWidget *reload;
-    GtkWidget *zoom_controls_box;
-    GtkWidget *zoom_level_label;
-
-    /* Exposed menus, for the path bar etc. */
-    GMenu *extensions_background_menu;
-    GMenu *templates_menu;
-
-    gulong stop_signal_handler;
-    gulong reload_signal_handler;
-
-    GCancellable *starred_cancellable;
-    NautilusTagManager *tag_manager;
-
-    gint name_accepted_handler_id;
-    gint cancelled_handler_id;
-} NautilusFilesViewPrivate;
-
-typedef struct
-{
     NautilusFile *file;
     NautilusDirectory *directory;
 } FileAndDirectory;
@@ -1998,7 +1870,7 @@
     disconnect_rename_controller_signals (view);
 }
 
-static void
+void
 nautilus_files_view_rename_file_popover_new (NautilusFilesView *view,
                                              NautilusFile      *target_file)
 {
@@ -2757,6 +2629,16 @@
     NAUTILUS_FILES_VIEW_CLASS (G_OBJECT_GET_CLASS (view))->click_policy_changed (view);
 }
 
+static void
+slow_double_click_mode_changed_callback (gpointer callback_data)
+{
+        NautilusFilesView *view;
+
+        view = NAUTILUS_FILES_VIEW (callback_data);
+
+        NAUTILUS_FILES_VIEW_CLASS (G_OBJECT_GET_CLASS (view))->slow_double_click_policy_changed (view);
+}
+
 gboolean
 nautilus_files_view_should_sort_directories_first (NautilusFilesView *view)
 {
@@ -3212,6 +3094,8 @@
                                           schedule_update_context_menus, view);
     g_signal_handlers_disconnect_by_func (nautilus_preferences,
                                           click_policy_changed_callback, view);
+    g_signal_handlers_disconnect_by_func (nautilus_preferences,
+                                          slow_double_click_mode_changed_callback, view);
     g_signal_handlers_disconnect_by_func (gtk_filechooser_preferences,
                                           sort_directories_first_changed_callback, view);
     g_signal_handlers_disconnect_by_func (gtk_filechooser_preferences,
@@ -9703,6 +9587,10 @@
                               "changed::" NAUTILUS_PREFERENCES_CLICK_POLICY,
                               G_CALLBACK (click_policy_changed_callback),
                               view);
+    g_signal_connect_swapped (nautilus_preferences,
+                              "changed::" NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY,
+                              G_CALLBACK(slow_double_click_mode_changed_callback),
+                              view);
     g_signal_connect_swapped (gtk_filechooser_preferences,
                               "changed::" NAUTILUS_PREFERENCES_SORT_DIRECTORIES_FIRST,
                               G_CALLBACK (sort_directories_first_changed_callback), view);
diff '--exclude=.git' -urN a/src/nautilus-files-view.h b/src/nautilus-files-view.h
--- a/src/nautilus-files-view.h	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-files-view.h	2018-09-25 13:32:35.836939000 -0500
@@ -40,6 +40,135 @@
 
 G_DECLARE_DERIVABLE_TYPE (NautilusFilesView, nautilus_files_view, NAUTILUS, FILES_VIEW, GtkGrid)
 
+#include "nautilus-tag-manager.h"
+
+#include "nautilus-file-name-widget-controller.h"
+#include "nautilus-rename-file-popover-controller.h"
+#include "nautilus-new-folder-dialog-controller.h"
+#include "nautilus-compress-dialog-controller.h"
+
+typedef struct
+{
+    /* Main components */
+    GtkWidget *overlay;
+
+    NautilusWindowSlot *slot;
+    NautilusDirectory *model;
+    NautilusFile *directory_as_file;
+    GFile *location;
+    guint dir_merge_id;
+
+    NautilusQuery *search_query;
+
+    NautilusRenameFilePopoverController *rename_file_controller;
+    NautilusNewFolderDialogController *new_folder_controller;
+    NautilusCompressDialogController *compress_controller;
+
+    gboolean supports_zooming;
+
+    GList *scripts_directory_list;
+    GList *templates_directory_list;
+
+    guint display_selection_idle_id;
+    guint update_context_menus_timeout_id;
+    guint update_status_idle_id;
+    guint reveal_selection_idle_id;
+
+    guint display_pending_source_id;
+    guint changes_timeout_id;
+
+    guint update_interval;
+    guint64 last_queued;
+
+    guint files_added_handler_id;
+    guint files_changed_handler_id;
+    guint load_error_handler_id;
+    guint done_loading_handler_id;
+    guint file_changed_handler_id;
+
+    GList *new_added_files;
+    GList *new_changed_files;
+
+    GHashTable *non_ready_files;
+
+    GList *old_added_files;
+    GList *old_changed_files;
+
+    GList *pending_selection;
+    GHashTable *pending_reveal;
+
+    /* whether we are in the active slot */
+    gboolean active;
+
+    /* loading indicates whether this view has begun loading a directory.
+     * This flag should need not be set inside subclasses. NautilusFilesView automatically
+     * sets 'loading' to TRUE before it begins loading a directory's contents and to FALSE
+     * after it finishes loading the directory and its view.
+     */
+    gboolean loading;
+    gboolean templates_present;
+    gboolean scripts_present;
+
+    gboolean in_destruction;
+
+    gboolean sort_directories_first;
+
+    gboolean show_hidden_files;
+    gboolean ignore_hidden_file_preferences;
+
+    gboolean batching_selection_level;
+    gboolean selection_changed_while_batched;
+
+    gboolean selection_was_removed;
+
+    gboolean metadata_for_directory_as_file_pending;
+    gboolean metadata_for_files_in_directory_pending;
+
+    GList *subdirectory_list;
+
+    GMenu *selection_menu;
+    GMenu *background_menu;
+
+    GActionGroup *view_action_group;
+
+    GtkWidget *scrolled_window;
+
+    /* Empty states */
+    GtkWidget *folder_is_empty_widget;
+    GtkWidget *trash_is_empty_widget;
+    GtkWidget *no_search_results_widget;
+    GtkWidget *starred_is_empty_widget;
+
+    /* Floating bar */
+    guint floating_bar_set_status_timeout_id;
+    guint floating_bar_loading_timeout_id;
+    guint floating_bar_set_passthrough_timeout_id;
+    GtkWidget *floating_bar;
+
+    /* Toolbar menu */
+    NautilusToolbarMenuSections *toolbar_menu_sections;
+    GtkWidget *sort_menu;
+    GtkWidget *sort_trash_time;
+    GtkWidget *visible_columns;
+    GtkWidget *stop;
+    GtkWidget *reload;
+    GtkWidget *zoom_controls_box;
+    GtkWidget *zoom_level_label;
+
+    /* Exposed menus, for the path bar etc. */
+    GMenu *extensions_background_menu;
+    GMenu *templates_menu;
+
+    gulong stop_signal_handler;
+    gulong reload_signal_handler;
+
+    GCancellable *starred_cancellable;
+    NautilusTagManager *tag_manager;
+
+    gint name_accepted_handler_id;
+    gint cancelled_handler_id;
+} NautilusFilesViewPrivate;
+
 struct _NautilusFilesViewClass {
         GtkGridClass parent_class;
 
@@ -213,6 +342,7 @@
          * values and forcing an update if appropriate.
          */
         void        (* click_policy_changed) (NautilusFilesView *view);
+        void        (* slow_double_click_policy_changed) (NautilusFilesView *view);
         void        (* sort_directories_first_changed) (NautilusFilesView *view);
 
         /* Get the id for this view. Its a guint*/
@@ -296,6 +426,8 @@
                                                                   const GList            *item_uris,
                                                                   const char             *target_uri,
                                                                   int                     copy_action);
+void              nautilus_files_view_rename_file_popover_new    (NautilusFilesView *view,
+                                                                  NautilusFile      *target_file);
 void              nautilus_files_view_new_file_with_initial_contents (NautilusFilesView  *view,
                                                                       const char         *parent_uri,
                                                                       const char         *filename,
diff '--exclude=.git' -urN a/src/nautilus-global-preferences.h b/src/nautilus-global-preferences.h
--- a/src/nautilus-global-preferences.h	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-global-preferences.h	2018-09-25 14:15:35.873533363 -0500
@@ -51,6 +51,9 @@
 /* Drag and drop preferences */
 #define NAUTILUS_PREFERENCES_OPEN_FOLDER_ON_DND_HOVER   	"open-folder-on-dnd-hover"
 
+/* Slow double click preference */
+#define NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY "slow-double-click-policy"
+
 /* Activating executable text files */
 #define NAUTILUS_PREFERENCES_EXECUTABLE_TEXT_ACTIVATION		"executable-text-activation"
 
diff '--exclude=.git' -urN a/src/nautilus-list-view-dnd.c b/src/nautilus-list-view-dnd.c
--- a/src/nautilus-list-view-dnd.c	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-list-view-dnd.c	2018-09-25 14:14:46.271733000 -0500
@@ -268,38 +268,37 @@
                              G_CALLBACK (drag_data_get_callback), list_view, 0);
 }
 
-void
+gboolean
 nautilus_list_view_dnd_drag_begin (NautilusListView *list_view,
-                                   gdouble           offset_x,
-                                   gdouble           offset_y,
-                                   const GdkEvent   *event)
+                                   GdkEventMotion   *event)
 {
-    if (list_view->details->drag_button == 0)
+    if (list_view->details->drag_button != 0)
     {
-        return;
-    }
-
-    if (!source_target_list)
-    {
-        source_target_list = nautilus_list_model_get_drag_target_list ();
-    }
+        if (!source_target_list)
+        {
+            source_target_list = nautilus_list_model_get_drag_target_list ();
+        }
 
-    if (gtk_drag_check_threshold (GTK_WIDGET (list_view->details->tree_view),
-                                  list_view->details->drag_x,
-                                  list_view->details->drag_y,
-                                  list_view->details->drag_x + offset_x,
-                                  list_view->details->drag_y + offset_y))
-    {
-        guint32 actions;
+        if (gtk_drag_check_threshold (GTK_WIDGET (list_view->details->tree_view),
+                                      list_view->details->drag_x,
+                                      list_view->details->drag_y,
+                                      event->x,
+                                      event->y))
+        {
+            guint32 actions;
 
-        actions = GDK_ACTION_MOVE | GDK_ACTION_COPY | GDK_ACTION_LINK | GDK_ACTION_ASK;
-        list_view->details->drag_source_info->source_actions = actions;
-        gtk_drag_begin_with_coordinates (GTK_WIDGET (list_view->details->tree_view),
-                                         source_target_list,
-                                         actions,
-                                         list_view->details->drag_button,
-                                         (GdkEvent *) event,
-                                         -1,
-                                         -1);
+            actions = GDK_ACTION_MOVE | GDK_ACTION_COPY | GDK_ACTION_LINK | GDK_ACTION_ASK;
+            list_view->details->drag_source_info->source_actions = actions;
+            gtk_drag_begin_with_coordinates (GTK_WIDGET (list_view->details->tree_view),
+                                             source_target_list,
+                                             actions,
+                                             list_view->details->drag_button,
+                                             (GdkEvent *) event,
+                                             -1,
+                                             -1);
+        }
+        return TRUE;
     }
+
+    return FALSE;
 }
diff '--exclude=.git' -urN a/src/nautilus-list-view-dnd.h b/src/nautilus-list-view-dnd.h
--- a/src/nautilus-list-view-dnd.h	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-list-view-dnd.h	2018-09-25 14:08:18.795221000 -0500
@@ -25,10 +25,8 @@
 #include "nautilus-dnd.h"
 
 void nautilus_list_view_dnd_init (NautilusListView *list_view);
-void nautilus_list_view_dnd_drag_begin (NautilusListView *list_view,
-                                        gdouble           offset_x,
-                                        gdouble           offset_y,
-                                        const GdkEvent   *event);
+gboolean nautilus_list_view_dnd_drag_begin (NautilusListView *list_view,
+                                            GdkEventMotion   *event);
 NautilusDragInfo *
 nautilus_list_view_dnd_get_drag_source_data (NautilusListView *list_view,
-                                             GdkDragContext   *context);
+                                             GdkDragContext   *context);
\ No newline at end of file
diff '--exclude=.git' -urN a/src/nautilus-list-view-private.h b/src/nautilus-list-view-private.h
--- a/src/nautilus-list-view-private.h	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-list-view-private.h	2018-09-25 14:15:35.873533363 -0500
@@ -42,6 +42,9 @@
 
   GtkTreePath *double_click_path[2]; /* Both clicks in a double click need to be on the same row */
 
+  gboolean skip_rename_on_release;
+  NautilusFile *just_renamed;
+
   GtkTreePath *new_selection_path;   /* Path of the new selection after removing a file */
 
   GtkTreePath *hover_path;
@@ -70,10 +73,9 @@
 
   GRegex *regex;
 
+  gboolean slow_double_click_mode;
+
   NautilusTagManager *tag_manager;
   GCancellable *starred_cancellable;
-
-  GtkGesture *tree_view_drag_gesture;
-  GtkGesture *tree_view_multi_press_gesture;
 };
 
diff '--exclude=.git' -urN a/src/nautilus-list-view.c b/src/nautilus-list-view.c
--- a/src/nautilus-list-view.c	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-list-view.c	2018-09-25 14:29:28.527021298 -0500
@@ -55,6 +55,8 @@
 #include "nautilus-ui-utilities.h"
 #include "nautilus-view.h"
 
+#include "nautilus-files-view.h"
+
 struct SelectionForeachData
 {
     GList *list;
@@ -92,6 +94,8 @@
                                         GdkEvent     *event,
                                         gpointer      user_data);
 
+static gboolean
+handle_icon_slow_double_click (NautilusListView *view, GtkTreePath *path, GdkEventButton *event);
 
 G_DEFINE_TYPE (NautilusListView, nautilus_list_view, NAUTILUS_TYPE_FILES_VIEW);
 
@@ -238,13 +242,9 @@
 }
 
 static gboolean
-button_event_modifies_selection (const GdkEvent *event)
+button_event_modifies_selection (GdkEventButton *event)
 {
-    GdkModifierType state;
-
-    gdk_event_get_state (event, &state);
-
-    return (state & (GDK_CONTROL_MASK | GDK_SHIFT_MASK)) != 0;
+    return (event->state & (GDK_CONTROL_MASK | GDK_SHIFT_MASK)) != 0;
 }
 
 static int
@@ -256,93 +256,90 @@
 
 static void
 nautilus_list_view_did_not_drag (NautilusListView *view,
-                                 const GdkEvent   *event)
+                                 GdkEventButton   *event)
 {
     GtkTreeView *tree_view;
     GtkTreeSelection *selection;
-    gdouble x;
-    gdouble y;
     GtkTreePath *path;
-    guint button;
-    GdkModifierType state;
 
     tree_view = view->details->tree_view;
     selection = gtk_tree_view_get_selection (tree_view);
 
-    if (!gdk_event_get_coords (event, &x, &y))
-    {
-        return;
-    }
-
-    if (!gtk_tree_view_get_path_at_pos (tree_view, x, y, &path, NULL, NULL, NULL))
-    {
-        return;
-    }
-
-    if (!gdk_event_get_button (event, &button))
-    {
-        return;
-    }
-
-    gdk_event_get_state (event, &state);
-
-    if ((button == GDK_BUTTON_PRIMARY || button == GDK_BUTTON_MIDDLE)
-        && ((state & GDK_CONTROL_MASK) != 0 ||
-            (state & GDK_SHIFT_MASK) == 0)
-        && view->details->row_selected_on_button_down)
+    if (gtk_tree_view_get_path_at_pos (tree_view, event->x, event->y,
+                                       &path, NULL, NULL, NULL))
     {
-        if (!button_event_modifies_selection (event))
-        {
-            gtk_tree_selection_unselect_all (selection);
-            gtk_tree_selection_select_path (selection, path);
-        }
-        else
+        if ((event->button == GDK_BUTTON_PRIMARY || event->button == GDK_BUTTON_MIDDLE)
+            && ((event->state & GDK_CONTROL_MASK) != 0 ||
+                (event->state & GDK_SHIFT_MASK) == 0)
+            && view->details->row_selected_on_button_down)
         {
-            gtk_tree_selection_unselect_path (selection, path);
+            if (!button_event_modifies_selection (event))
+            {
+                gtk_tree_selection_unselect_all (selection);
+                gtk_tree_selection_select_path (selection, path);
+            }
+            else
+            {
+                gtk_tree_selection_unselect_path (selection, path);
+            }
         }
-    }
 
-    if ((get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE)
-        && !button_event_modifies_selection (event))
-    {
-        if (button == GDK_BUTTON_PRIMARY)
+        if ((get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE)
+            && !button_event_modifies_selection (event))
         {
-            activate_selected_items (view);
-        }
-        else if (button == GDK_BUTTON_MIDDLE)
-        {
-            activate_selected_items_alternate (view, NULL, TRUE);
+            if (event->button == GDK_BUTTON_PRIMARY)
+            {
+                activate_selected_items (view);
+            }
+            else if (event->button == GDK_BUTTON_MIDDLE)
+            {
+                activate_selected_items_alternate (view, NULL, TRUE);
+            }
         }
+
+		NautilusFile *file = nautilus_list_model_file_for_path (view->details->model, path);
+
+		if (handle_icon_slow_double_click (view, path, event)) {
+			if (!view->details->skip_rename_on_release &&
+				(view->details->just_renamed == NULL || view->details->just_renamed != file))
+				nautilus_files_view_rename_file_popover_new (NAUTILUS_FILES_VIEW (view),
+															 file);
+			/* Allow normal double click if just renamed */
+			if (view->details->just_renamed == file) {
+				view->details->just_renamed = NULL;
+			} else {
+				view->details->just_renamed = file;
+			}
+		}
+
+		nautilus_file_unref (file);
+
+        gtk_tree_path_free (path);
     }
-    gtk_tree_path_free (path);
 }
 
 static gboolean
-on_motion_notify (GtkWidget *widget,
-                  GdkEvent  *event,
-                  gpointer   callback_data)
+motion_notify_callback (GtkWidget      *widget,
+                        GdkEventMotion *event,
+                        gpointer        callback_data)
 {
     NautilusListView *view;
-    gdouble x;
-    gdouble y;
+    gboolean handled = FALSE;
 
     view = NAUTILUS_LIST_VIEW (callback_data);
 
-    /* Remove after switching to GTK+ 4. */
-    if (gdk_event_get_window (event) != gtk_tree_view_get_bin_window (GTK_TREE_VIEW (widget)))
+    if (event->window != gtk_tree_view_get_bin_window (GTK_TREE_VIEW (widget)))
     {
-        return GDK_EVENT_PROPAGATE;
+        return FALSE;
     }
 
-    g_assert (gdk_event_get_coords (event, &x, &y));
-
     if (get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE)
     {
         GtkTreePath *old_hover_path;
 
         old_hover_path = view->details->hover_path;
         gtk_tree_view_get_path_at_pos (GTK_TREE_VIEW (widget),
-                                       x, y,
+                                       event->x, event->y,
                                        &view->details->hover_path,
                                        NULL, NULL, NULL);
 
@@ -364,13 +361,16 @@
         }
     }
 
-    return GDK_EVENT_PROPAGATE;
+    nautilus_list_view_dnd_init (view);
+    handled = nautilus_list_view_dnd_drag_begin (view, event);
+
+    return handled;
 }
 
 static gboolean
-on_leave_notify (GtkWidget *widget,
-                 GdkEvent  *event,
-                 gpointer   callback_data)
+leave_notify_callback (GtkWidget        *widget,
+                       GdkEventCrossing *event,
+                       gpointer          callback_data)
 {
     NautilusListView *view;
 
@@ -383,13 +383,13 @@
         view->details->hover_path = NULL;
     }
 
-    return GDK_EVENT_PROPAGATE;
+    return FALSE;
 }
 
 static gboolean
-on_enter_notify (GtkWidget *widget,
-                 GdkEvent  *event,
-                 gpointer   callback_data)
+enter_notify_callback (GtkWidget        *widget,
+                       GdkEventCrossing *event,
+                       gpointer          callback_data)
 {
     NautilusListView *view;
 
@@ -397,18 +397,13 @@
 
     if (get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE)
     {
-        gdouble x;
-        gdouble y;
-
         if (view->details->hover_path != NULL)
         {
             gtk_tree_path_free (view->details->hover_path);
         }
 
-        g_assert (gdk_event_get_coords (event, &x, &y));
-
         gtk_tree_view_get_path_at_pos (GTK_TREE_VIEW (widget),
-                                       x, y,
+                                       event->x, event->y,
                                        &view->details->hover_path,
                                        NULL, NULL, NULL);
 
@@ -418,7 +413,7 @@
         }
     }
 
-    return GDK_EVENT_PROPAGATE;
+    return FALSE;
 }
 
 static void
@@ -521,73 +516,203 @@
     nautilus_file_list_free (selection);
 }
 
-static void
-on_tree_view_multi_press_gesture_pressed (GtkGestureMultiPress *gesture,
-                                          gint                  n_press,
-                                          gdouble               x,
-                                          gdouble               y,
-                                          gpointer              callback_data)
+static gboolean
+clicked_within_double_click_interval (NautilusListView *view)
+{
+	static gint64 last_click_time = 0;
+	static gint click_count = 0;
+	gint double_click_time;
+	gint64 current_time;
+
+	/* Determine click count */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (view))), 
+				  "gtk-double-click-time", &double_click_time,
+				  NULL);
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_click_time < double_click_time * 1000) {
+		click_count++;
+	} else {
+		click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_click_time = current_time;
+
+	/* Only allow double click */
+	if (click_count == 1) {
+		click_count = 0;
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
+static gboolean
+clicked_within_slow_double_click_interval (NautilusListView *view, GtkTreePath *path, GdkEventButton *event)
+{
+	static gint64 last_click_time = 0;
+	static gint click_count = 0;
+	gint double_click_time;
+	gint64 current_time;
+
+	/* Determine click count (slow double click time is the 400ms default + 2s) */
+	g_object_get (G_OBJECT (gtk_widget_get_settings (GTK_WIDGET (view))), 
+				  "gtk-double-click-time", &double_click_time,
+				  NULL);
+	current_time = g_get_monotonic_time ();
+	if (current_time - last_click_time < (double_click_time + 2000) * 1000) {
+		click_count = 1;
+	} else {
+		NautilusFile *file = nautilus_list_model_file_for_path (view->details->model, path);
+
+		/* Allow normal double click if just renamed */
+		if (view->details->just_renamed == file) {
+			view->details->just_renamed = NULL;
+		}
+
+		nautilus_file_unref (file);
+
+		click_count = 0;
+	}
+
+	/* Stash time for next compare */
+	last_click_time = current_time;
+
+	GtkTreeSelection *selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (view->details->tree_view));
+
+	GList *selected = gtk_tree_selection_get_selected_rows (selection, NULL);
+	gint selected_count = g_list_length (selected);
+	g_list_free (selected);
+
+	if (selected_count != 1)
+		return FALSE;
+
+	/* Only allow slow double click */
+	if (click_count == 1 &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0) {
+		click_count = 0;
+		return TRUE;
+	} else {
+		return FALSE;
+	}
+}
+
+static gboolean
+handle_icon_double_click (NautilusListView *view, GtkTreePath *path, GdkEventButton *event, gboolean on_expander)
+{
+	GtkWidgetClass *tree_view_class;
+	tree_view_class = GTK_WIDGET_GET_CLASS (view->details->tree_view);
+
+	/* Ignore double click if we are in single click mode */
+	if (get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE) {
+		return FALSE;
+	}
+
+	if (clicked_within_double_click_interval (view) && 
+		view->details->double_click_path[1] &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0 &&
+		!on_expander) {
+		/* NOTE: Activation can actually destroy the view if we're switching */
+		if (!button_event_modifies_selection (event)) {
+			if ((event->button == 1 || event->button == 3)) {
+				activate_selected_items (view);
+			} else if (event->button == 2) {
+				activate_selected_items_alternate (view, NULL, TRUE);
+			}
+
+			return TRUE;
+		} else if (event->button == 1 &&
+			   (event->state & GDK_SHIFT_MASK) != 0) {
+			NautilusFile *file;
+			file = nautilus_list_model_file_for_path (view->details->model, path);
+			if (file != NULL) {
+				activate_selected_items_alternate (view, file, TRUE);
+				nautilus_file_unref (file);
+			}
+
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
+static gboolean
+handle_icon_slow_double_click (NautilusListView *view, GtkTreePath *path, GdkEventButton *event)
+{
+	NautilusListViewDetails *details;
+	NautilusFile *file;
+
+	details = view->details;
+
+	if (!details->slow_double_click_mode)
+		return FALSE;
+
+	file = nautilus_list_model_file_for_path (view->details->model, path);
+
+	if (!nautilus_file_can_rename (file))
+		return FALSE;
+
+	if (clicked_within_slow_double_click_interval (view, path, event) && view->details->double_click_path[1] &&
+		gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0) {
+		if (!button_event_modifies_selection (event)) {
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
+static gboolean
+button_press_callback (GtkWidget      *widget,
+                       GdkEventButton *event,
+                       gpointer        callback_data)
 {
     NautilusListView *view;
-    GtkWidget *widget;
     GtkTreeView *tree_view;
-    g_autoptr (GtkTreePath) path = NULL;
+    GtkTreePath *path;
     GtkTreeViewColumn *column;
     GtkTreeSelection *selection;
     GtkWidgetClass *tree_view_class;
-    guint button;
-    gint bin_x;
-    gint bin_y;
-    GdkEventSequence *sequence;
-    const GdkEvent *event;
     gboolean call_parent, on_expander, show_expanders;
     gboolean is_simple_click, path_selected;
     NautilusFile *file;
     gboolean on_star;
 
     view = NAUTILUS_LIST_VIEW (callback_data);
-    widget = gtk_event_controller_get_widget (GTK_EVENT_CONTROLLER (gesture));
     tree_view = GTK_TREE_VIEW (widget);
     tree_view_class = GTK_WIDGET_GET_CLASS (tree_view);
     selection = gtk_tree_view_get_selection (tree_view);
-    button = gtk_gesture_single_get_current_button (GTK_GESTURE_SINGLE (gesture));
-
-    gtk_tree_view_convert_widget_to_bin_window_coords (tree_view, x, y, &bin_x, &bin_y);
+    view->details->last_event_button_x = event->x;
+    view->details->last_event_button_y = event->y;
 
-    view->details->last_event_button_x = bin_x;
-    view->details->last_event_button_y = bin_y;
+	view->details->skip_rename_on_release = FALSE;
 
     /* Don't handle extra mouse buttons here */
-    if (button > 5)
+    if (event->button > 5)
     {
-        return;
+        return FALSE;
     }
 
-    sequence = gtk_gesture_single_get_current_sequence (GTK_GESTURE_SINGLE (gesture));
-    event = gtk_gesture_get_last_event (GTK_GESTURE (gesture), sequence);
+	if (event->type == GDK_2BUTTON_PRESS) {
+		return TRUE;
+	}
 
-    /* Remove after switching to GTK+ 4. */
-    if (gdk_event_get_window (event) != gtk_tree_view_get_bin_window (tree_view))
+    if (event->window != gtk_tree_view_get_bin_window (tree_view))
     {
-        return;
+        return FALSE;
     }
 
     nautilus_list_model_set_drag_view
         (NAUTILUS_LIST_MODEL (gtk_tree_view_get_model (tree_view)),
         tree_view,
-        bin_x, bin_y);
-
-    /* Ignore double click if we are in single click mode */
-    if (get_click_policy () == NAUTILUS_CLICK_POLICY_SINGLE && n_press >= 2)
-    {
-        return;
-    }
+        event->x, event->y);
 
     view->details->ignore_button_release = FALSE;
-    is_simple_click = ((button == GDK_BUTTON_PRIMARY || button == GDK_BUTTON_MIDDLE) && (n_press == 1));
+    is_simple_click = ((event->button == GDK_BUTTON_PRIMARY || event->button == GDK_BUTTON_MIDDLE) && (event->type == GDK_BUTTON_PRESS));
 
     /* No item at this position */
-    if (!gtk_tree_view_get_path_at_pos (tree_view, bin_x, bin_y,
+    if (!gtk_tree_view_get_path_at_pos (tree_view, event->x, event->y,
                                         &path, &column, NULL, NULL))
     {
         if (is_simple_click)
@@ -597,15 +722,18 @@
             view->details->double_click_path[0] = NULL;
         }
 
+        /* Deselect if people click outside any row. It's OK to
+         *  let default code run; it won't reselect anything. */
         gtk_tree_selection_unselect_all (gtk_tree_view_get_selection (tree_view));
+        tree_view_class->button_press_event (widget, event);
 
-        if (button == GDK_BUTTON_SECONDARY)
+        if (event->button == GDK_BUTTON_SECONDARY)
         {
             nautilus_files_view_pop_up_background_context_menu (NAUTILUS_FILES_VIEW (view),
-                                                                event);
+                                                                (GdkEvent *) event);
         }
 
-        return;
+        return TRUE;
     }
 
     call_parent = TRUE;
@@ -626,11 +754,11 @@
 
         if (gtk_widget_get_direction (widget) == GTK_TEXT_DIR_RTL)
         {
-            on_expander = bin_x > (cell_area.x + cell_area.width);
+            on_expander = event->x > (cell_area.x + cell_area.width);
         }
         else
         {
-            on_expander = bin_x < cell_area.x;
+            on_expander = event->x < cell_area.x;
         }
     }
 
@@ -645,55 +773,30 @@
 
     on_star = (g_strcmp0 (gtk_tree_view_column_get_title (column), "Star") == 0 &&
                !gtk_tree_view_is_blank_at_pos (tree_view,
-                                               bin_x,
-                                               bin_y,
+                                               event->x,
+                                               event->y,
                                                NULL,
                                                NULL,
                                                NULL,
                                                NULL));
 
-    if (is_simple_click && n_press <= 0 && on_star)
+    if (is_simple_click && on_star)
     {
-        on_star_cell_renderer_clicked (path, view);
+            on_star_cell_renderer_clicked (path, view);
     }
-    else if (n_press == 2 && !on_star)
+    else if (handle_icon_double_click (view, path, event, on_expander) && !on_star)
     {
         /* Double clicking does not trigger a D&D action. */
         view->details->drag_button = 0;
-
-        /* NOTE: Activation can actually destroy the view if we're switching */
-        if (!on_expander &&
-            view->details->double_click_path[1] &&
-            gtk_tree_path_compare (view->details->double_click_path[0], view->details->double_click_path[1]) == 0)
-        {
-            if ((button == GDK_BUTTON_PRIMARY) && button_event_modifies_selection (event))
-            {
-                file = nautilus_list_model_file_for_path (view->details->model, path);
-                if (file != NULL)
-                {
-                    activate_selected_items_alternate (view, file, TRUE);
-                    nautilus_file_unref (file);
-                }
-            }
-            else if ((button == GDK_BUTTON_PRIMARY || button == GDK_BUTTON_SECONDARY))
-            {
-                activate_selected_items (view);
-            }
-        }
-        else
-        {
-            return;
-        }
     }
     else
     {
-        GdkModifierType state;
-        g_autoptr (GtkTreePath) cursor = NULL;
-        GList *selected_rows = NULL;
-
-        gdk_event_get_state (event, &state);
+		GList *selected_rows = gtk_tree_selection_get_selected_rows (tree_view, NULL);
+		view->details->skip_rename_on_release = g_list_length (selected_rows) > 1;
+		g_list_free (selected_rows);
 
-        if (button == GDK_BUTTON_SECONDARY)
+        g_autoptr (GtkTreePath) cursor = NULL;
+        if (event->button == GDK_BUTTON_SECONDARY)
         {
             if (path_selected)
             {
@@ -705,14 +808,14 @@
                  */
                 call_parent = FALSE;
             }
-            else if ((state & GDK_CONTROL_MASK) != 0)
+            else if ((event->state & GDK_CONTROL_MASK) != 0)
             {
                 /* If CTRL is pressed, we don't allow the parent
                  * class to handle it, since GtkTreeView doesn't
                  * do it as intended currently.
                  */
                 call_parent = FALSE;
-                if ((state & GDK_SHIFT_MASK) != 0)
+                if ((event->state & GDK_SHIFT_MASK) != 0)
                 {
                     /* This is the CTRL+SHIFT selection mode which
                      * we handleourselves, as the parent class would
@@ -753,8 +856,8 @@
             }
         }
 
-        if ((button == GDK_BUTTON_PRIMARY || button == GDK_BUTTON_MIDDLE) &&
-            ((state & GDK_CONTROL_MASK) != 0 || (state & GDK_SHIFT_MASK) == 0))
+        if ((event->button == GDK_BUTTON_PRIMARY || event->button == GDK_BUTTON_MIDDLE) &&
+            ((event->state & GDK_CONTROL_MASK) != 0 || (event->state & GDK_SHIFT_MASK) == 0))
         {
             view->details->row_selected_on_button_down = path_selected;
 
@@ -763,10 +866,10 @@
                 call_parent = on_expander;
                 view->details->ignore_button_release = on_expander;
             }
-            else if ((state & GDK_CONTROL_MASK) != 0)
+            else if ((event->state & GDK_CONTROL_MASK) != 0)
             {
                 call_parent = FALSE;
-                if ((state & GDK_SHIFT_MASK) != 0)
+                if ((event->state & GDK_SHIFT_MASK) != 0)
                 {
                     gtk_tree_view_get_cursor (tree_view, &cursor, NULL);
                     if (cursor != NULL)
@@ -800,21 +903,10 @@
             }
         }
 
-        if (is_simple_click && on_expander)
-        {
-            /* Need to let the event propagate down, since propagating up
-             * by chaining up to button_press_event() doesn’t expand the
-             * expander.
-             */
-            return;
-        }
-
-        /* Needed to select an item before popping up a menu. */
         if (call_parent)
         {
             g_signal_handlers_block_by_func (tree_view, row_activated_callback, view);
-            /* GTK+ 4 TODO: replace with event(), at the very least. */
-            tree_view_class->button_press_event (widget, (GdkEventButton *) event);
+            tree_view_class->button_press_event (widget, event);
             g_signal_handlers_unblock_by_func (tree_view, row_activated_callback, view);
         }
         else if (path_selected)
@@ -825,205 +917,44 @@
         if (is_simple_click && !on_expander)
         {
             view->details->drag_started = FALSE;
-            view->details->drag_button = button;
-            view->details->drag_x = bin_x;
-            view->details->drag_y = bin_y;
+            view->details->drag_button = event->button;
+            view->details->drag_x = event->x;
+            view->details->drag_y = event->y;
         }
 
-        if (button == GDK_BUTTON_SECONDARY)
+        if (event->button == GDK_BUTTON_SECONDARY)
         {
             nautilus_files_view_pop_up_selection_context_menu (NAUTILUS_FILES_VIEW (view),
-                                                               event);
+                                                               (GdkEvent *) event);
         }
-
-        /* Don't open a new tab if we are in single click mode (this would open 2 tabs),
-         * or if CTRL or SHIFT is pressed.
-         */
-        if (button == GDK_BUTTON_MIDDLE &&
-            get_click_policy () != NAUTILUS_CLICK_POLICY_SINGLE &&
-            !button_event_modifies_selection (event))
-        {
-            gtk_tree_selection_unselect_all (selection);
-            gtk_tree_selection_select_path (selection, path);
-
-            activate_selected_items_alternate (view, NULL, TRUE);
-        }
-    }
-
-    gtk_gesture_set_state (GTK_GESTURE (gesture), GTK_EVENT_SEQUENCE_CLAIMED);
-}
-
-static void
-on_tree_view_multi_press_gesture_released (GtkGestureMultiPress *gesture,
-                                           gint                  n_press,
-                                           gdouble               x,
-                                           gdouble               y,
-                                           gpointer              callback_data)
-{
-    NautilusListView *view;
-    guint button;
-
-    view = NAUTILUS_LIST_VIEW (callback_data);
-    button = gtk_gesture_single_get_current_button (GTK_GESTURE_SINGLE (gesture));
-    if (button != view->details->drag_button)
-    {
-        return;
     }
 
-    view->details->drag_button = 0;
-    if (!view->details->drag_started && !view->details->ignore_button_release)
-    {
-        GdkEventSequence *sequence;
-        const GdkEvent *event;
-
-        sequence = gtk_gesture_single_get_current_sequence (GTK_GESTURE_SINGLE (gesture));
-        event = gtk_gesture_get_last_event (GTK_GESTURE (gesture), sequence);
-        /* Typically will only happen with GTK+ <= 3.22.30 and <= 3.93.0,
-         * where ::released is emitted after ::cancel, but can’t hurt to guard
-         * against it anyway.
-         */
-        if (event == NULL)
-        {
-            return;
-        }
+    gtk_tree_path_free (path);
 
-        nautilus_list_view_did_not_drag (view, event);
-    }
+    /* We chained to the default handler in this method, so never
+     * let the default handler run */
+    return TRUE;
 }
 
 static gboolean
-key_press_callback (GtkWidget *widget,
-                    GdkEvent  *event,
-                    gpointer   callback_data)
+button_release_callback (GtkWidget      *widget,
+                         GdkEventButton *event,
+                         gpointer        callback_data)
 {
-    NautilusFilesView *view;
-    GtkTreeView *tree_view;
-    guint keyval;
-    GdkModifierType state;
-
-    view = NAUTILUS_FILES_VIEW (callback_data);
-    tree_view = GTK_TREE_VIEW (widget);
-
-    NAUTILUS_LIST_VIEW (view)->details->last_event_button_x = -1;
-    NAUTILUS_LIST_VIEW (view)->details->last_event_button_y = -1;
-
-    if (G_UNLIKELY (!gdk_event_get_keyval (event, &keyval)))
-    {
-        g_return_val_if_reached (GDK_EVENT_PROPAGATE);
-    }
-    if (gdk_event_get_state (event, &state))
-    {
-        return GDK_EVENT_PROPAGATE;
-    }
-
-    if (keyval == GDK_KEY_F10)
-    {
-        if ((state & GDK_CONTROL_MASK) != 0)
-        {
-            nautilus_files_view_pop_up_background_context_menu (view, NULL);
-
-            return GDK_EVENT_STOP;
-        }
-    }
-
-    if (keyval == GDK_KEY_Right)
-    {
-        g_autoptr (GtkTreePath) path = NULL;
-
-        gtk_tree_view_get_cursor (tree_view, &path, NULL);
-
-        if (path != NULL)
-        {
-            gtk_tree_view_expand_row (tree_view, path, FALSE);
-        }
-
-        return GDK_EVENT_STOP;
-    }
-
-    if (keyval == GDK_KEY_Left)
-    {
-        g_autoptr (GtkTreePath) path = NULL;
-
-        gtk_tree_view_get_cursor (tree_view, &path, NULL);
-
-        if (path != NULL && !gtk_tree_view_collapse_row (tree_view, path))
-        {
-            /* if the row is already collapsed or doesn't have any children,
-             * jump to the parent row instead.
-             */
-            if ((gtk_tree_path_get_depth (path) > 1) && gtk_tree_path_up (path))
-            {
-                gtk_tree_view_set_cursor (tree_view, path, NULL, FALSE);
-            }
-        }
-
-        return GDK_EVENT_STOP;
-    }
-
-    if (keyval == GDK_KEY_space)
-    {
-        if ((state & GDK_CONTROL_MASK) != 0)
-        {
-            return GDK_EVENT_PROPAGATE;
-        }
-
-        if (!gtk_widget_has_focus (GTK_WIDGET (NAUTILUS_LIST_VIEW (view)->details->tree_view)))
-        {
-            return GDK_EVENT_PROPAGATE;
-        }
-
-        if ((state & GDK_SHIFT_MASK) != 0)
-        {
-            activate_selected_items_alternate (NAUTILUS_LIST_VIEW (view), NULL, TRUE);
-        }
-        else
-        {
-            preview_selected_items (NAUTILUS_LIST_VIEW (view));
-        }
+    NautilusListView *view;
 
-        return GDK_EVENT_STOP;
-    }
+    view = NAUTILUS_LIST_VIEW (callback_data);
 
-    if (keyval == GDK_KEY_v)
+    if (event->button == view->details->drag_button)
     {
-        /* Eat Control + v to not enable type ahead */
-        if ((state & GDK_CONTROL_MASK) != 0)
+        view->details->drag_button = 0;
+        if (!view->details->drag_started &&
+            !view->details->ignore_button_release)
         {
-            return GDK_EVENT_STOP;
+            nautilus_list_view_did_not_drag (view, event);
         }
     }
-
-    return GDK_EVENT_PROPAGATE;
-}
-
-static gboolean
-on_event (GtkWidget *widget,
-          GdkEvent  *event,
-          gpointer   user_data)
-{
-    GdkEventType event_type;
-
-    event_type = gdk_event_get_event_type (event);
-
-    /* TODO: Replace motion events with motion controllers. */
-    if (event_type == GDK_MOTION_NOTIFY)
-    {
-        return on_motion_notify (widget, event, user_data);
-    }
-    else if (event_type == GDK_ENTER_NOTIFY)
-    {
-        return on_enter_notify (widget, event, user_data);
-    }
-    else if (event_type == GDK_LEAVE_NOTIFY)
-    {
-        return on_leave_notify (widget, event, user_data);
-    }
-    else if (event_type == GDK_KEY_PRESS)
-    {
-        return key_press_callback (widget, event, user_data);
-    }
-
-    return GDK_EVENT_PROPAGATE;
+    return FALSE;
 }
 
 static void
@@ -1205,6 +1136,111 @@
 }
 
 static gboolean
+key_press_callback (GtkWidget   *widget,
+                    GdkEventKey *event,
+                    gpointer     callback_data)
+{
+    NautilusFilesView *view;
+    gboolean handled;
+    GtkTreeView *tree_view;
+    GtkTreePath *path;
+
+    tree_view = GTK_TREE_VIEW (widget);
+
+    view = NAUTILUS_FILES_VIEW (callback_data);
+    handled = FALSE;
+
+    NAUTILUS_LIST_VIEW (view)->details->last_event_button_x = -1;
+    NAUTILUS_LIST_VIEW (view)->details->last_event_button_y = -1;
+
+    switch (event->keyval)
+    {
+        case GDK_KEY_F10:
+        {
+            if (event->state & GDK_CONTROL_MASK)
+            {
+                nautilus_files_view_pop_up_background_context_menu (view, NULL);
+                handled = TRUE;
+            }
+        }
+        break;
+
+        case GDK_KEY_Right:
+        {
+            gtk_tree_view_get_cursor (tree_view, &path, NULL);
+            if (path)
+            {
+                gtk_tree_view_expand_row (tree_view, path, FALSE);
+                gtk_tree_path_free (path);
+            }
+            handled = TRUE;
+        }
+        break;
+
+        case GDK_KEY_Left:
+        {
+            gtk_tree_view_get_cursor (tree_view, &path, NULL);
+            if (path)
+            {
+                if (!gtk_tree_view_collapse_row (tree_view, path))
+                {
+                    /* if the row is already collapsed or doesn't have any children,
+                     * jump to the parent row instead.
+                     */
+                    if ((gtk_tree_path_get_depth (path) > 1) && gtk_tree_path_up (path))
+                    {
+                        gtk_tree_view_set_cursor (tree_view, path, NULL, FALSE);
+                    }
+                }
+
+                gtk_tree_path_free (path);
+            }
+            handled = TRUE;
+        }
+        break;
+
+        case GDK_KEY_space:
+        {
+            if (event->state & GDK_CONTROL_MASK)
+            {
+                handled = FALSE;
+                break;
+            }
+            if (!gtk_widget_has_focus (GTK_WIDGET (NAUTILUS_LIST_VIEW (view)->details->tree_view)))
+            {
+                handled = FALSE;
+                break;
+            }
+            if ((event->state & GDK_SHIFT_MASK) != 0)
+            {
+                activate_selected_items_alternate (NAUTILUS_LIST_VIEW (view), NULL, TRUE);
+            }
+            else
+            {
+                preview_selected_items (NAUTILUS_LIST_VIEW (view));
+            }
+            handled = TRUE;
+        }
+        break;
+
+        case GDK_KEY_v:
+        {
+            /* Eat Control + v to not enable type ahead */
+            if ((event->state & GDK_CONTROL_MASK) != 0)
+            {
+                handled = TRUE;
+            }
+        }
+        break;
+
+        default:
+            handled = FALSE;
+    }
+
+    return handled;
+}
+
+static gboolean
 test_expand_row_callback (GtkTreeView *tree_view,
                           GtkTreeIter *iter,
                           GtkTreePath *path,
@@ -1498,12 +1534,10 @@
 }
 
 static gboolean
-on_column_header_event (GtkWidget *widget,
-                        GdkEvent  *event,
-                        gpointer   user_data)
+column_header_clicked (GtkWidget        *column_button,
+                       GdkEventButton   *event,
+                       NautilusListView *list_view)
 {
-    NautilusListView *list_view;
-    guint button;
     NautilusFile *file;
     char **visible_columns;
     char **column_order;
@@ -1514,18 +1548,9 @@
     GtkWidget *menu;
     GtkWidget *menu_item;
 
-    list_view = NAUTILUS_LIST_VIEW (user_data);
-
-    if (gdk_event_get_event_type (event) != GDK_BUTTON_PRESS)
-    {
-        return GDK_EVENT_PROPAGATE;
-    }
-
-    g_assert (gdk_event_get_button (event, &button));
-
-    if (button != GDK_BUTTON_SECONDARY)
+    if (event->button != GDK_BUTTON_SECONDARY)
     {
-        return GDK_EVENT_PROPAGATE;
+        return FALSE;
     }
 
     file = nautilus_files_view_get_directory_as_file (NAUTILUS_FILES_VIEW (list_view));
@@ -1606,14 +1631,14 @@
                       list_view);
 
     gtk_widget_show_all (menu);
-    gtk_menu_popup_at_pointer (GTK_MENU (menu), event);
+    gtk_menu_popup_at_pointer (GTK_MENU (menu), (GdkEvent *) event);
 
     g_hash_table_destroy (visible_columns_hash);
     nautilus_column_list_free (all_columns);
     g_strfreev (column_order);
     g_strfreev (visible_columns);
 
-    return GDK_EVENT_STOP;
+    return TRUE;
 }
 
 static void
@@ -2083,32 +2108,6 @@
 }
 
 static void
-on_tree_view_drag_gesture_drag_begin (GtkGestureDrag *gesture,
-                                      gdouble         start_x,
-                                      gdouble         start_y,
-                                      gpointer        user_data)
-{
-    nautilus_list_view_dnd_init (NAUTILUS_LIST_VIEW (user_data));
-}
-
-static void
-on_tree_view_drag_gesture_drag_update (GtkGestureDrag *gesture,
-                                       gdouble         offset_x,
-                                       gdouble         offset_y,
-                                       gpointer        user_data)
-{
-    GdkEventSequence *sequence;
-    const GdkEvent *event;
-    NautilusListView *list_view;
-
-    sequence = gtk_gesture_single_get_current_sequence (GTK_GESTURE_SINGLE (gesture));
-    event = gtk_gesture_get_last_event (GTK_GESTURE (gesture), sequence);
-    list_view = NAUTILUS_LIST_VIEW (user_data);
-
-    nautilus_list_view_dnd_drag_begin (list_view, offset_x, offset_y, event);
-}
-
-static void
 create_and_set_up_tree_view (NautilusListView *view)
 {
     GtkCellRenderer *cell;
@@ -2156,30 +2155,18 @@
                              "changed",
                              G_CALLBACK (list_selection_changed_callback), view, 0);
 
-    view->details->tree_view_drag_gesture = gtk_gesture_drag_new (GTK_WIDGET (view->details->tree_view));
-
-    gtk_event_controller_set_propagation_phase (GTK_EVENT_CONTROLLER (view->details->tree_view_drag_gesture),
-                                                GTK_PHASE_CAPTURE);
-    gtk_gesture_single_set_button (GTK_GESTURE_SINGLE (view->details->tree_view_drag_gesture), 0);
-
-    g_signal_connect (view->details->tree_view_drag_gesture, "drag-begin",
-                      G_CALLBACK (on_tree_view_drag_gesture_drag_begin), view);
-    g_signal_connect (view->details->tree_view_drag_gesture, "drag-update",
-                      G_CALLBACK (on_tree_view_drag_gesture_drag_update), view);
-
-    view->details->tree_view_multi_press_gesture = gtk_gesture_multi_press_new (GTK_WIDGET (view->details->tree_view));
-
-    gtk_event_controller_set_propagation_phase (GTK_EVENT_CONTROLLER (view->details->tree_view_multi_press_gesture),
-                                                GTK_PHASE_CAPTURE);
-    gtk_gesture_single_set_button (GTK_GESTURE_SINGLE (view->details->tree_view_multi_press_gesture), 0);
-
-    g_signal_connect (view->details->tree_view_multi_press_gesture, "pressed",
-                      G_CALLBACK (on_tree_view_multi_press_gesture_pressed), view);
-    g_signal_connect (view->details->tree_view_multi_press_gesture, "released",
-                      G_CALLBACK (on_tree_view_multi_press_gesture_released), view);
-
-    g_signal_connect_object (view->details->tree_view, "event",
-                             G_CALLBACK (on_event), view, 0);
+    g_signal_connect_object (view->details->tree_view, "motion-notify-event",
+                             G_CALLBACK (motion_notify_callback), view, 0);
+    g_signal_connect_object (view->details->tree_view, "enter-notify-event",
+                             G_CALLBACK (enter_notify_callback), view, 0);
+    g_signal_connect_object (view->details->tree_view, "leave-notify-event",
+                             G_CALLBACK (leave_notify_callback), view, 0);
+    g_signal_connect_object (view->details->tree_view, "button-press-event",
+                             G_CALLBACK (button_press_callback), view, 0);
+    g_signal_connect_object (view->details->tree_view, "button-release-event",
+                             G_CALLBACK (button_release_callback), view, 0);
+    g_signal_connect_object (view->details->tree_view, "key-press-event",
+                             G_CALLBACK (key_press_callback), view, 0);
     g_signal_connect_object (view->details->tree_view, "test-expand-row",
                              G_CALLBACK (test_expand_row_callback), view, 0);
     g_signal_connect_object (view->details->tree_view, "row-expanded",
@@ -2258,8 +2245,8 @@
                                  view->details->file_name_column);
 
             g_signal_connect (gtk_tree_view_column_get_button (view->details->file_name_column),
-                              "event",
-                              G_CALLBACK (on_column_header_event),
+                              "button-press-event",
+                              G_CALLBACK (column_header_clicked),
                               view);
 
             gtk_tree_view_set_search_column (view->details->tree_view, column_num);
@@ -2352,8 +2339,8 @@
                                  column);
 
             g_signal_connect (gtk_tree_view_column_get_button (column),
-                              "event",
-                              G_CALLBACK (on_column_header_event),
+                              "button-press-event",
+                              G_CALLBACK (column_header_clicked),
                               view);
 
             gtk_tree_view_column_set_resizable (column, TRUE);
@@ -3525,6 +3512,19 @@
 }
 
 static void
+nautilus_list_view_slow_double_click_policy_changed (NautilusFilesView *directory_view)
+{
+	NautilusListView *view;
+
+	g_assert (NAUTILUS_IS_LIST_VIEW (directory_view));
+
+	view = NAUTILUS_LIST_VIEW (directory_view);
+
+	view->details->slow_double_click_mode = g_settings_get_boolean (nautilus_preferences,
+															 NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY);
+}
+
+static void
 nautilus_list_view_click_policy_changed (NautilusFilesView *directory_view)
 {
     GdkWindow *win;
@@ -3659,8 +3659,6 @@
                                           default_column_order_changed_callback,
                                           list_view);
 
-    g_clear_object (&list_view->details->tree_view_drag_gesture);
-    g_clear_object (&list_view->details->tree_view_multi_press_gesture);
 
     G_OBJECT_CLASS (nautilus_list_view_parent_class)->dispose (object);
 }
@@ -4002,6 +4000,7 @@
     nautilus_files_view_class->get_view_id = nautilus_list_view_get_id;
     nautilus_files_view_class->get_first_visible_file = nautilus_list_view_get_first_visible_file;
     nautilus_files_view_class->scroll_to_file = list_view_scroll_to_file;
+	nautilus_files_view_class->slow_double_click_policy_changed = nautilus_list_view_slow_double_click_policy_changed;
     nautilus_files_view_class->compute_rename_popover_pointing_to = nautilus_list_view_compute_rename_popover_pointing_to;
     nautilus_files_view_class->reveal_for_selection_context_menu = nautilus_list_view_reveal_for_selection_context_menu;
 }
@@ -4014,6 +4013,9 @@
 
     list_view->details = g_new0 (NautilusListViewDetails, 1);
 
+	list_view->details->skip_rename_on_release = FALSE;
+	list_view->details->just_renamed = NULL;
+
     /* ensure that the zoom level is always set before settings up the tree view columns */
     list_view->details->zoom_level = get_default_zoom_level ();
 
@@ -4045,6 +4047,7 @@
                       G_CALLBACK (on_clipboard_owner_changed), list_view);
 
     nautilus_list_view_click_policy_changed (NAUTILUS_FILES_VIEW (list_view));
+	nautilus_list_view_slow_double_click_policy_changed (NAUTILUS_FILES_VIEW (list_view));
 
     nautilus_list_view_set_zoom_level (list_view, get_default_zoom_level ());
 
diff '--exclude=.git' -urN a/src/nautilus-preferences-window.c b/src/nautilus-preferences-window.c
--- a/src/nautilus-preferences-window.c	2018-09-03 12:31:52.000000000 -0500
+++ b/src/nautilus-preferences-window.c	2018-09-25 14:15:35.874533359 -0500
@@ -63,11 +63,15 @@
     "trash_confirm_checkbutton"
 #define NAUTILUS_PREFERENCES_DIALOG_USE_NEW_VIEWS_WIDGET                       \
     "use_new_views_checkbutton"
+#define NAUTILUS_PREFERENCES_DIALOG_SLOW_DOUBLE_CLICK_WIDGET                   \
+    "slow_double_click_checkbutton"
 
 /* int enums */
 #define NAUTILUS_PREFERENCES_DIALOG_THUMBNAIL_LIMIT_WIDGET                     \
     "preview_image_size_spinbutton"
 
+#define W(s) (gtk_builder_get_object (builder, s))
+
 static const char * const speed_tradeoff_values[] =
 {
     "local-only", "always", "never",
@@ -453,6 +457,29 @@
     }
 }
 
+/* disable slow-double-click-policy when click-policy is "single" */
+static void
+setup_slow_double_click_policy (GtkBuilder *builder)
+{
+	gboolean enabled = FALSE;
+	enabled = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (W (click_behavior_components[1])));
+	if(enabled==FALSE){
+		gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(W (NAUTILUS_PREFERENCES_DIALOG_SLOW_DOUBLE_CLICK_WIDGET)), FALSE);
+	}
+	gtk_widget_set_sensitive (GTK_WIDGET (W (NAUTILUS_PREFERENCES_DIALOG_SLOW_DOUBLE_CLICK_WIDGET)), enabled);
+}
+
+static void
+connect_slow_double_click_policy (GtkBuilder *builder)
+{
+	GtkRadioButton *w;
+	w = GTK_RADIO_BUTTON(W(click_behavior_components[0]));
+ 		g_signal_connect_swapped (w, "toggled", G_CALLBACK (setup_slow_double_click_policy), builder);
+
+	w = GTK_RADIO_BUTTON(W(click_behavior_components[1]));
+		g_signal_connect_swapped (w, "toggled", G_CALLBACK (setup_slow_double_click_policy), builder);
+}
+
 static void nautilus_preferences_window_setup(GtkBuilder *builder,
                                               GtkWindow  *parent_window)
 {
@@ -481,6 +508,9 @@
     bind_builder_radio (
         builder, nautilus_preferences, (const char **) click_behavior_components,
         NAUTILUS_PREFERENCES_CLICK_POLICY, (const char **) click_behavior_values);
+    bind_builder_bool(builder, nautilus_preferences,
+                        NAUTILUS_PREFERENCES_DIALOG_SLOW_DOUBLE_CLICK_WIDGET,
+                        NAUTILUS_PREFERENCES_SLOW_DOUBLE_CLICK_POLICY);
     bind_builder_radio (builder, nautilus_preferences,
                         (const char **) executable_text_components,
                         NAUTILUS_PREFERENCES_EXECUTABLE_TEXT_ACTIVATION,
@@ -502,6 +532,10 @@
                             NAUTILUS_PREFERENCES_DIALOG_THUMBNAIL_LIMIT_WIDGET,
                             NAUTILUS_PREFERENCES_FILE_THUMBNAIL_LIMIT);
 
+    /* disable slow-double-click-policy when click-policy is "single" */
+    setup_slow_double_click_policy (builder);
+    connect_slow_double_click_policy (builder);
+
     nautilus_preferences_window_setup_thumbnail_limit_formatting (builder);
     nautilus_preferences_window_setup_icon_caption_page (builder);
     nautilus_preferences_window_setup_list_column_page (builder);
diff '--exclude=.git' -urN a/src/resources/ui/nautilus-preferences-window.ui b/src/resources/ui/nautilus-preferences-window.ui
--- a/src/resources/ui/nautilus-preferences-window.ui	2018-09-03 12:31:52.000000000 -0500
+++ b/src/resources/ui/nautilus-preferences-window.ui	2018-09-25 14:36:01.544435755 -0500
@@ -522,6 +522,23 @@
                         <property name="position">3</property>
                       </packing>
                     </child>
+                    <child>
+                      <object class="GtkCheckButton" id="slow_double_click_checkbutton">
+                        <property name="label" translatable="yes">Slowly double click to rename items</property>
+                        <property name="use_action_appearance">False</property>
+                        <property name="visible">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="receives_default">False</property>
+                        <property name="use_underline">True</property>
+                        <property name="xalign">0</property>
+                        <property name="draw_indicator">True</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">False</property>
+                        <property name="position">4</property>
+                      </packing>
+                    </child>
                     <accessibility>
                       <relation type="labelled-by" target="label10"/>
                     </accessibility>
